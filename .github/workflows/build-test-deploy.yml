name: CI/CD

env:
  SENTRY_AUTH_TOKEN: "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"


on:
  push:
    branches:
      - "main"

jobs:
  lint:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: "20.x"

      - name: Install dependencies
        run: npm install

      - name: Run ESLint
        run: npm run lint
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: "20.x"

      - name: Install dependencies
        run: npm install

      - name: Run Tests
        run: npm test

      - name: Code Coverage Report
        uses: irongut/CodeCoverageSummary@v1.3.0
        with:
          filename: /coverage-xml/coverage.xml
          badge: true
          fail_below_min: true
          format: markdown
          hide_branch_rate: true
          hide_complexity: true
          indicators: true
          output: both

      - name: Upload coverage artifact
        uses: actions/upload-artifact@v2
        with:
          name: coverage-report
          path: coverage-xml
          
  publish-coverage-badge:
      needs: test
      runs-on: ubuntu-latest
      steps:
        - name: Download coverage artifact
          uses: actions/download-artifact@v2
          with:
            name: coverage-report
            path: coverage-xml
  
        - name: Copy coverage badge to artifacts
          run: cp coverage-xml/coverage-summary-badge.svg $GITHUB_WORKSPACE/coverage-badge.svg
  
        - name: Publish coverage badge
          uses: actions/upload-artifact@v2
          with:
            name: coverage-badge
            path: $GITHUB_WORKSPACE/coverage-badge.svg

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [lint, test]

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: "20.x"

      - name: Install dependencies
        run: npm install

      - name: Build the project
        run: npm run build

      - name: Archive production files
        uses: actions/upload-artifact@v2
        with:
          name: dist
          path: dist

  deploy:
    name: Deploy to EC2 on master branch push
    runs-on: ubuntu-latest
    needs: [build]

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Download artifact
        uses: actions/download-artifact@v2
        with:
          name: dist
          path: dist

      - name: Deploy to server devops_epita
        uses: easingthemes/ssh-deploy@main
        with:
          SSH_PRIVATE_KEY: ${{ secrets.EC2_DEVOPS_EPITA_SECRET }}
          REMOTE_HOST: ${{ secrets.HOST_DNS }}
          REMOTE_USER: ${{ secrets.USERNAME }}
          SOURCE: "dist/"
          ARGS: "-rDzvc -i --delete"
          TARGET: ${{ secrets.TARGET_DIR }}

      - name: Executing remote ssh commands using ssh key
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST_DNS }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.EC2_DEVOPS_EPITA_SECRET }}
          script: |
            sudo systemctl start apache2
            sudo systemctl enable apache2
            sudo rm -rf /var/www/html/*
            cd home/concert-search-app/
            sudo mv * /var/www/html/
